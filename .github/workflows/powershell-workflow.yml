name: PowerShell CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly run on Monday at midnight

jobs:
  validate:
    name: Validate PowerShell Scripts
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install PSScriptAnalyzer
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSScriptAnalyzer -Force
        
    - name: Lint with PSScriptAnalyzer
      shell: pwsh
      run: |
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
        $results | Format-Table -AutoSize
        if ($results) {
          Write-Error "PSScriptAnalyzer found issues. Please fix them."
          $results | Format-Table -AutoSize
          exit 1
        }
        
    - name: Check PowerShell syntax
      shell: pwsh
      run: |
        $files = Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse
        foreach ($file in $files) {
          $syntaxErrors = $null
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content -Path $file.FullName -Raw), [ref]$syntaxErrors)
          if ($syntaxErrors.Count -gt 0) {
            Write-Error "Syntax errors in $($file.FullName)"
            $syntaxErrors | Format-Table -AutoSize
            exit 1
          }
        }

  test:
    name: Run Pester Tests
    runs-on: windows-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Pester and required modules
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force
        Install-Module -Name Microsoft.Graph -Force
        Install-Module -Name AzureAD -Force -AllowClobber
        
    - name: Run Pester tests
      shell: pwsh
      run: |
        $config = New-PesterConfiguration
        $config.Run.Path = "./tests"
        $config.Output.Verbosity = "Detailed"
        Invoke-Pester -Configuration $config
      
  security-scan:
    name: Security Scan
    runs-on: windows-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install security modules
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSScriptAnalyzer -Force
        
    - name: Run security scan
      shell: pwsh
      run: |
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery -ExcludeRule PSAvoidUsingPlainTextForPassword,PSAvoidUsingConvertToSecureStringWithPlainText
        $securityIssues = $results | Where-Object { $_.Severity -eq 'Warning' -or $_.Severity -eq 'Error' }
        $securityIssues | Format-Table -AutoSize
        if ($securityIssues) {
          Write-Warning "Security issues found. Review the output."
        }

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
        
    - name: Build documentation
      run: |
        mkdocs build
        
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site